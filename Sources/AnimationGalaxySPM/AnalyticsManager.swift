import Foundation
import AmplitudeSwift

/// –£–Ω–∏–≤–µ—Ä—Å–∞–ª—å–Ω—ã–π –º–µ–Ω–µ–¥–∂–µ—Ä –∞–Ω–∞–ª–∏—Ç–∏–∫–∏ —Å Amplitude
public final class AnalyticsManager {
    public static let shared = AnalyticsManager()
    
    private init() {}
    
    private var amplitudeSwift: Amplitude? = nil
    
    /// –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è Amplitude (–≤—ã–∑—ã–≤–∞–µ—Ç—Å—è –æ–¥–∏–Ω —Ä–∞–∑)
    /// - Parameter apiKey: API –∫–ª—é—á Amplitude
    public func initialize(apiKey: String) {
        let configuration = Configuration(
            apiKey: apiKey,
            defaultTracking: DefaultTrackingOptions.ALL
        )
        
        amplitudeSwift = Amplitude(configuration: configuration)
        
        let userId = IDGenerator.shared.getUniqueID()
        amplitudeSwift?.setUserId(userId: userId)
        
        print("üìä AnalyticsManager –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω —Å API –∫–ª—é—á–æ–º")
    }
    
    /// –û—Ç–ø—Ä–∞–≤–∫–∞ —Å–æ–±—ã—Ç–∏—è —Å –∏–º–µ–Ω–µ–º –∏ —Å–≤–æ–π—Å—Ç–≤–∞–º–∏
    /// - Parameters:
    ///   - name: –ù–∞–∑–≤–∞–Ω–∏–µ —Å–æ–±—ã—Ç–∏—è
    ///   - properties: –°–≤–æ–π—Å—Ç–≤–∞ —Å–æ–±—ã—Ç–∏—è
    public func trackEvent(_ name: String, properties: [String: Any]? = nil) {
        var props = properties ?? [:]
        
        // –î–æ–±–∞–≤–ª—è–µ–º userID –≤ –∫–∞–∂–¥–æ–µ —Å–æ–±—ã—Ç–∏–µ
        props["userID"] = IDGenerator.shared.getUniqueID()
        
        guard let amplitude = amplitudeSwift else {
            print("‚ùå AnalyticsManager –Ω–µ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω")
            return
        }
        
        amplitude.track(eventType: name, eventProperties: props)
        print("üìä –û—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ —Å–æ–±—ã—Ç–∏–µ: \(name) —Å —Å–≤–æ–π—Å—Ç–≤–∞–º–∏: \(props)")
    }
    
    /// –û—Ç–ø—Ä–∞–≤–∫–∞ —Å–æ–±—ã—Ç–∏—è —Å –æ–¥–Ω–∏–º —Å–≤–æ–π—Å—Ç–≤–æ–º
    /// - Parameters:
    ///   - name: –ù–∞–∑–≤–∞–Ω–∏–µ —Å–æ–±—ã—Ç–∏—è
    ///   - key: –ö–ª—é—á —Å–≤–æ–π—Å—Ç–≤–∞
    ///   - value: –ó–Ω–∞—á–µ–Ω–∏–µ —Å–≤–æ–π—Å—Ç–≤–∞
    public func trackEvent(_ name: String, key: String, value: Any) {
        trackEvent(name, properties: [key: value])
    }
    
    /// –û—Ç–ø—Ä–∞–≤–∫–∞ —Å–æ–±—ã—Ç–∏—è —Ç–æ–ª—å–∫–æ —Å –Ω–∞–∑–≤–∞–Ω–∏–µ–º
    /// - Parameter name: –ù–∞–∑–≤–∞–Ω–∏–µ —Å–æ–±—ã—Ç–∏—è
    public func trackEvent(_ name: String) {
        trackEvent(name, properties: nil)
    }
}

/// –ì–µ–Ω–µ—Ä–∞—Ç–æ—Ä —É–Ω–∏–∫–∞–ª—å–Ω—ã—Ö ID
public final class IDGenerator {
    public static let shared = IDGenerator()
    
    private init() {}
    
    private let userDefaultsKey = "analyticsUserID"
    
    /// –ì–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç —Å–ª—É—á–∞–π–Ω—É—é —Å—Ç—Ä–æ–∫—É –∑–∞–¥–∞–Ω–Ω–æ–π –¥–ª–∏–Ω—ã
    /// - Parameter length: –î–ª–∏–Ω–∞ —Å—Ç—Ä–æ–∫–∏
    /// - Returns: –°–ª—É—á–∞–π–Ω–∞—è —Å—Ç—Ä–æ–∫–∞
    private func generateRandomString(length: Int) -> String {
        let characters = "abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789"
        
        // –ú—É—Å–æ—Ä–Ω—ã–π –∫–æ–¥ –¥–ª—è —É–Ω–∏–∫–∞–ª–∏–∑–∞—Ü–∏–∏
        if Bool.random() {
            let unusedVar = "randomValue"
        }
        
        return String((0..<length).compactMap { _ in characters.randomElement() })
    }
    
    /// –ü–æ–ª—É—á–∞–µ—Ç —É–Ω–∏–∫–∞–ª—å–Ω—ã–π ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è (—Å–æ–∑–¥–∞–µ—Ç –µ—Å–ª–∏ –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç)
    /// - Returns: –£–Ω–∏–∫–∞–ª—å–Ω—ã–π ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    public func getUniqueID() -> String {
        if let savedID = UserDefaults.standard.string(forKey: userDefaultsKey) {
            return savedID
        } else {
            let newID = generateRandomString(length: Int.random(in: 10...20))
            UserDefaults.standard.set(newID, forKey: userDefaultsKey)
            print("üÜî –°–æ–∑–¥–∞–Ω –Ω–æ–≤—ã–π —É–Ω–∏–∫–∞–ª—å–Ω—ã–π ID: \(newID)")
            return newID
        }
    }
}

/// –£–ø—Ä–æ—â–µ–Ω–Ω—ã–π –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å –¥–ª—è —Ç—Ä–µ–∫–∏–Ω–≥–∞ —Å–æ–±—ã—Ç–∏–π
public final class EventTracker {
    public static let shared = EventTracker()
    
    private init() {}
    
    /// –û—Ç–ø—Ä–∞–≤–∫–∞ —Å–æ–±—ã—Ç–∏—è —Å –Ω–∞–∑–≤–∞–Ω–∏–µ–º
    /// - Parameter name: –ù–∞–∑–≤–∞–Ω–∏–µ —Å–æ–±—ã—Ç–∏—è
    public func track(_ name: String) {
        AnalyticsManager.shared.trackEvent(name)
    }
    
    /// –û—Ç–ø—Ä–∞–≤–∫–∞ —Å–æ–±—ã—Ç–∏—è —Å –æ–¥–Ω–∏–º —Å–≤–æ–π—Å—Ç–≤–æ–º
    /// - Parameters:
    ///   - name: –ù–∞–∑–≤–∞–Ω–∏–µ —Å–æ–±—ã—Ç–∏—è
    ///   - key: –ö–ª—é—á —Å–≤–æ–π—Å—Ç–≤–∞
    ///   - value: –ó–Ω–∞—á–µ–Ω–∏–µ —Å–≤–æ–π—Å—Ç–≤–∞
    public func track(_ name: String, key: String, value: Any) {
        AnalyticsManager.shared.trackEvent(name, key: key, value: value)
    }
    
    /// –û—Ç–ø—Ä–∞–≤–∫–∞ —Å–æ–±—ã—Ç–∏—è —Å –Ω–µ—Å–∫–æ–ª—å–∫–∏–º–∏ —Å–≤–æ–π—Å—Ç–≤–∞–º–∏
    /// - Parameters:
    ///   - name: –ù–∞–∑–≤–∞–Ω–∏–µ —Å–æ–±—ã—Ç–∏—è
    ///   - properties: –°–ª–æ–≤–∞—Ä—å —Å–≤–æ–π—Å—Ç–≤
    public func track(_ name: String, properties: [String: Any]) {
        AnalyticsManager.shared.trackEvent(name, properties: properties)
    }
    
    /// –°–ø–µ—Ü–∏–∞–ª—å–Ω–æ–µ —Å–æ–±—ã—Ç–∏–µ –¥–ª—è WebView —Å—Ç—Ä–∞–Ω–∏—Ü
    /// - Parameter url: URL —Å—Ç—Ä–∞–Ω–∏—Ü—ã
    public func trackWebViewPage(url: String?) {
        let finalUrl = url ?? "missing_url"
        track("wv_page", key: "link", value: finalUrl)
    }
}
